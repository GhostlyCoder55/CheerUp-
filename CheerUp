import Foundation
import SwiftUI

class ComplimentService {
    static let shared = ComplimentService()
    
    private let baseURL = "https://complimentr.com/api"
    
    func fetchCompliment() async throws -> String {
        guard let url = URL(string: baseURL) else {
            throw URLError(.badURL)
        }
        
        let (data, _) = try await URLSession.shared.data(from: url)
        let response = try JSONDecoder().decode(ComplimentResponse.self, from: data)
        return response.compliment
    }
}

struct ComplimentResponse: Codable {
    let compliment: String
}

class ComplimentStore {
    static let shared = ComplimentStore()
    
    let localCompliments = [
        "You are loved and appreciated!",
        "You have a great sense of humor!",
        "You're a fantastic problem solver!",
        "You light up the room!",
        "You have a wonderful smile!",
        "You're so thoughtful!",
        "Your creativity is inspiring!",
        "You're a great listener!",
        "You make people feel appreciated!",
        "You are a joy to be around!"
    ]
    
    func randomCompliment() -> String {
        localCompliments.randomElement() ?? "You are amazing!"
    }
}

struct ContentView: View {
    // ... existing compliments array ...
    
    @State private var currentCompliment: String = "Tap below for a dose of positivity! âœ¨"
    @State private var backgroundColor: Color = Color(red: 0.95, green: 0.95, blue: 0.98)
    @State private var isAnimating = false
    
    var body: some View {
        ZStack {
            // Dynamic background with gradient
            LinearGradient(
                colors: [backgroundColor, backgroundColor.opacity(0.8)],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea()
            
            // Animated background shapes
            GeometryReader { geometry in
                Circle()
                    .fill(backgroundColor.opacity(0.3))
                    .frame(width: 200, height: 200)
                    .blur(radius: 20)
                    .offset(x: -50, y: geometry.size.height * 0.2)
                
                Circle()
                    .fill(backgroundColor.opacity(0.2))
                    .frame(width: 300, height: 300)
                    .blur(radius: 30)
                    .offset(x: geometry.size.width * 0.5, y: geometry.size.height * 0.7)
            }
            
            VStack(spacing: 30) {
                // Title with emoji
                HStack(spacing: 12) {
                    Text("CheerUp!")
                        .font(.system(size: 40, weight: .bold, design: .rounded))
                    Text("ðŸŒŸ")
                        .font(.system(size: 40))
                        .rotationEffect(.degrees(isAnimating ? 360 : 0))
                        .animation(
                            .spring(response: 0.5, dampingFraction: 0.5)
                            .repeatForever(autoreverses: false),
                            value: isAnimating
                        )
                }
                .padding(.top, 40)
                
                Spacer()
                
                // Compliment card
                VStack {
                    Text(currentCompliment)
                        .font(.system(.title2, design: .rounded))
                        .fontWeight(.medium)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                        .padding(.vertical, 30)
                        .frame(maxWidth: .infinity)
                        .background(
                            RoundedRectangle(cornerRadius: 25)
                                .fill(.ultraThinMaterial)
                                .shadow(color: .black.opacity(0.1), radius: 10, x: 0, y: 5)
                        )
                        .padding(.horizontal, 20)
                }
                .transition(.scale.combined(with: .opacity))
                
                Spacer()
                
                // Generate button
                Button(action: {
                    withAnimation(.spring(response: 0.6, dampingFraction: 0.8)) {
                        generateCompliment()
                    }
                }) {
                    HStack(spacing: 12) {
                        Image(systemName: "sparkles")
                            .font(.title2)
                        Text("New Compliment")
                            .font(.system(.title3, design: .rounded))
                            .fontWeight(.semibold)
                    }
                    .foregroundColor(.white)
                    .padding(.vertical, 16)
                    .padding(.horizontal, 30)
                    .background(
                        RoundedRectangle(cornerRadius: 20)
                            .fill(
                                LinearGradient(
                                    colors: [Color.purple.opacity(0.8), Color.blue.opacity(0.8)],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                    )
                    .shadow(color: .black.opacity(0.2), radius: 10, x: 0, y: 5)
                }
                .padding(.bottom, 20)
                
                // Credits
                Text("Created by Christopher Ogbonnaya")
                    .font(.system(.footnote, design: .rounded))
                    .fontWeight(.medium)
                    .foregroundColor(.secondary)
                    .padding(.bottom, 10)
            }
        }
        .onAppear {
            isAnimating = true
        }
    }
    
    func generateCompliment() {
        if let randomCompliment = compliments.randomElement() {
            currentCompliment = randomCompliment
        }
        
        // Generate a pleasing pastel background color
        backgroundColor = Color(
            red: Double.random(in: 0.7...0.9),
            green: Double.random(in: 0.7...0.9),
            blue: Double.random(in: 0.7...0.9)
        )
    }
} 